/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  ClaudeChatPlugin: () => ClaudeChatPlugin,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/claude-cli-service.ts
var import_child_process = require("child_process");
var import_events = require("events");
var ClaudeCLIService = class extends import_events.EventEmitter {
  constructor() {
    super();
    this.currentProcess = null;
    this.isProcessing = false;
    this.partialData = "";
    this.performanceMetrics = {
      lastResponseTime: 0,
      successCount: 0,
      errorCount: 0,
      averageResponseTime: 0
    };
    this.responseTimes = [];
  }
  /**
   * Check if Claude CLI is available on the system
   */
  async checkCLIAvailability() {
    return new Promise((resolve) => {
      const process2 = (0, import_child_process.spawn)("claude", ["--version"]);
      process2.on("close", (code) => {
        resolve(code === 0);
      });
      process2.on("error", () => {
        resolve(false);
      });
      setTimeout(() => {
        process2.kill();
        resolve(false);
      }, 5e3);
    });
  }
  /**
   * Build Claude CLI command with options
   */
  buildCLICommand(options) {
    const isWindows = process.platform === "win32";
    const command = isWindows ? "claude.exe" : "claude";
    const args = [];
    if (options.sessionId) {
      args.push("--session-id", options.sessionId);
    }
    if (options.vaultPath) {
      args.push("--add-dir", options.vaultPath);
    }
    if (options.streaming !== false) {
      args.push("--output-format", "stream-json");
    }
    if (options.allowedTools && options.allowedTools.length > 0) {
      args.push("--allowedTools", options.allowedTools.join(","));
    }
    args.push(options.message);
    return { command, args };
  }
  /**
   * Parse streaming JSON response from Claude CLI
   */
  parseStreamResponse(data) {
    const lines = data.split("\n").filter((line) => line.trim());
    const responses = [];
    for (const line of lines) {
      try {
        const parsed = JSON.parse(line);
        responses.push(parsed);
      } catch (error) {
        continue;
      }
    }
    return responses;
  }
  /**
   * Handle partial stream chunks and return parsed responses
   */
  handleStreamChunk(chunk) {
    this.partialData += chunk;
    const lines = this.partialData.split("\n");
    this.partialData = lines.pop() || "";
    const responses = [];
    for (const line of lines) {
      if (line.trim()) {
        try {
          const parsed = JSON.parse(line);
          responses.push(parsed);
        } catch (error) {
          continue;
        }
      }
    }
    return responses;
  }
  /**
   * Start chat session with Claude CLI
   */
  async startChat(options, onResponse) {
    if (this.isProcessing) {
      throw new Error("Claude CLI is currently busy");
    }
    this.isProcessing = true;
    const startTime = Date.now();
    return new Promise((resolve, reject) => {
      var _a, _b;
      const command = this.buildCLICommand(options);
      try {
        this.currentProcess = (0, import_child_process.spawn)(command.command, command.args);
      } catch (error) {
        this.isProcessing = false;
        reject(error);
        return;
      }
      let hasEnded = false;
      let errorOutput = "";
      const timeout = options.timeout || 3e4;
      const timeoutId = setTimeout(() => {
        if (this.currentProcess && !hasEnded) {
          this.currentProcess.kill("SIGTERM");
          this.cleanup();
          reject(new Error("Claude CLI process timed out"));
        }
      }, timeout);
      (_a = this.currentProcess.stdout) == null ? void 0 : _a.on("data", (data) => {
        const chunk = data.toString();
        const responses = this.handleStreamChunk(chunk);
        responses.forEach((response) => {
          onResponse(response);
          if (response.type === "end") {
            hasEnded = true;
          }
        });
      });
      (_b = this.currentProcess.stderr) == null ? void 0 : _b.on("data", (data) => {
        errorOutput += data.toString();
      });
      this.currentProcess.on("close", (code) => {
        clearTimeout(timeoutId);
        const responseTime = Date.now() - startTime;
        this.updatePerformanceMetrics(responseTime, code === 0);
        this.cleanup();
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Claude CLI process failed with exit code: ${code}${errorOutput ? "\n" + errorOutput : ""}`));
        }
      });
      this.currentProcess.on("error", (error) => {
        clearTimeout(timeoutId);
        this.updatePerformanceMetrics(Date.now() - startTime, false);
        this.cleanup();
        reject(error);
      });
    });
  }
  /**
   * Update performance metrics
   */
  updatePerformanceMetrics(responseTime, success) {
    this.performanceMetrics.lastResponseTime = responseTime;
    if (success) {
      this.performanceMetrics.successCount++;
    } else {
      this.performanceMetrics.errorCount++;
    }
    this.responseTimes.push(responseTime);
    if (this.responseTimes.length > 100) {
      this.responseTimes.shift();
    }
    this.performanceMetrics.averageResponseTime = this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length;
  }
  /**
   * Get performance metrics
   */
  getPerformanceMetrics() {
    return { ...this.performanceMetrics };
  }
  /**
   * Cleanup resources
   */
  cleanup() {
    if (this.currentProcess) {
      this.currentProcess.removeAllListeners();
      if (!this.currentProcess.killed) {
        this.currentProcess.kill();
      }
      this.currentProcess = null;
    }
    this.isProcessing = false;
    this.partialData = "";
  }
  /**
   * Terminate current session
   */
  terminate() {
    if (this.currentProcess && !this.currentProcess.killed) {
      this.currentProcess.kill("SIGTERM");
    }
    this.cleanup();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  sessionTimeout: 3e4,
  maxHistorySize: 100,
  showPerformanceMetrics: true,
  vaultIntegration: true,
  allowedTools: ["read", "search"],
  autoDetectCLI: true
};
var ClaudeChatPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.cliAvailable = false;
    this.chatHistory = [];
    this.currentSessionId = null;
  }
  async onload() {
    await this.loadSettings();
    this.cliService = new ClaudeCLIService();
    if (this.settings.autoDetectCLI) {
      this.cliAvailable = await this.cliService.checkCLIAvailability();
      if (!this.cliAvailable) {
        new import_obsidian.Notice("Claude CLI not found. Please install Claude Code for full functionality.");
      }
    }
    this.addCommand({
      id: "open-chat",
      name: "Open Chat Panel",
      callback: () => this.openChatPanel()
    });
    this.addCommand({
      id: "new-chat-session",
      name: "Start New Chat Session",
      callback: () => this.startNewSession()
    });
    this.addCommand({
      id: "export-chat",
      name: "Export Chat to Note",
      callback: () => this.exportChatToNote()
    });
    this.addSettingTab(new ClaudeChatSettingTab(this.app, this));
    this.registerView("claude-chat", (leaf) => new ChatView(leaf, this));
    this.startNewSession();
  }
  async onunload() {
    if (this.cliService) {
      this.cliService.cleanup();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Session Management
  generateSessionId() {
    return `chat-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
  startNewSession() {
    this.currentSessionId = this.generateSessionId();
    this.chatHistory = [];
    this.app.workspace.getLeavesOfType("claude-chat").forEach((leaf) => {
      leaf.view.onNewSession();
    });
  }
  // Chat Panel Management
  async openChatPanel() {
    const existingLeaf = this.app.workspace.getLeavesOfType("claude-chat")[0];
    if (existingLeaf) {
      this.app.workspace.revealLeaf(existingLeaf);
      existingLeaf.view.focus();
    } else {
      const leaf = this.app.workspace.getLeaf("split", "vertical");
      await leaf.setViewState({
        type: "claude-chat",
        active: true
      });
    }
  }
  // Message Handling
  async sendMessage(message) {
    var _a, _b;
    if (!this.cliAvailable) {
      this.createNotice("Claude CLI is not available. Please install Claude Code.", "error");
      return;
    }
    try {
      const userMessage = {
        type: "user",
        content: message,
        timestamp: new Date()
      };
      this.addToHistory(userMessage);
      const options = {
        message,
        sessionId: this.currentSessionId || void 0,
        streaming: true,
        timeout: this.settings.sessionTimeout
      };
      if (this.settings.vaultIntegration) {
        options.vaultPath = ((_b = (_a = this.app.vault.adapter.path) == null ? void 0 : _a.resolve) == null ? void 0 : _b.call(_a, ".")) || "/mock/vault";
        options.allowedTools = this.settings.allowedTools;
      }
      let assistantContent = "";
      const startTime = Date.now();
      await this.cliService.startChat(options, (response) => {
        this.handleStreamResponse(response, (content) => {
          assistantContent += content;
        });
      });
      if (assistantContent) {
        const assistantMessage = {
          type: "assistant",
          content: assistantContent,
          timestamp: new Date()
        };
        this.addToHistory(assistantMessage);
      }
      if (this.settings.showPerformanceMetrics) {
        const responseTime = Date.now() - startTime;
        console.log(`Claude response time: ${responseTime}ms`);
      }
    } catch (error) {
      console.error("Failed to send message:", error);
      this.createNotice(
        "Failed to communicate with Claude CLI. Please ensure Claude Code is installed.",
        "error"
      );
    }
  }
  handleStreamResponse(response, onContent) {
    switch (response.type) {
      case "content":
        if (response.content) {
          onContent(response.content);
          this.app.workspace.getLeavesOfType("claude-chat").forEach((leaf) => {
            leaf.view.appendStreamingContent(response.content);
          });
        }
        break;
      case "end":
        this.app.workspace.getLeavesOfType("claude-chat").forEach((leaf) => {
          leaf.view.onStreamingComplete();
        });
        break;
      case "error":
        console.error("Claude CLI error:", response.error);
        this.createNotice(`Claude error: ${response.error}`, "error");
        break;
    }
  }
  addToHistory(message) {
    this.chatHistory.push(message);
    if (this.chatHistory.length > this.settings.maxHistorySize) {
      this.chatHistory = this.chatHistory.slice(-this.settings.maxHistorySize);
    }
    this.app.workspace.getLeavesOfType("claude-chat").forEach((leaf) => {
      leaf.view.updateHistory(this.chatHistory);
    });
  }
  // Export functionality
  async exportChatToNote() {
    if (this.chatHistory.length === 0) {
      this.createNotice("No chat history to export.", "warning");
      return;
    }
    const timestamp = new Date().toISOString().split("T")[0];
    const filename = `Chat Export ${timestamp}.md`;
    let content = `# Chat Export - ${new Date().toLocaleString()}

`;
    this.chatHistory.forEach((message, index) => {
      const role = message.type === "user" ? "\u{1F464} User" : "\u{1F916} Claude";
      content += `## ${role} (${message.timestamp.toLocaleTimeString()})

${message.content}

`;
    });
    try {
      const file = await this.app.vault.create(filename, content);
      this.createNotice(`Chat exported to ${filename}`, "success");
      const leaf = this.app.workspace.getLeaf();
      await leaf.openFile(file);
    } catch (error) {
      console.error("Failed to export chat:", error);
      this.createNotice("Failed to export chat.", "error");
    }
  }
  // Utility methods
  createNotice(message, type = "info") {
    new import_obsidian.Notice(message);
  }
  getPerformanceMetrics() {
    return this.cliService.getPerformanceMetrics();
  }
  // Test helper methods
  async executeCommand(commandId) {
    const command = this.commands[commandId];
    if (command && command.callback) {
      await command.callback();
    }
  }
};
var ChatView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return "claude-chat";
  }
  getDisplayText() {
    return "Claude Chat";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const chatContainer = container.createEl("div", { cls: "claude-chat-container" });
    chatContainer.createEl("h3", { text: "Claude Chat", cls: "chat-header" });
    const messagesArea = chatContainer.createEl("div", { cls: "chat-messages" });
    messagesArea.createEl("p", { text: "Chat interface will be implemented here", cls: "placeholder" });
    const inputArea = chatContainer.createEl("div", { cls: "chat-input" });
    const input = inputArea.createEl("input", { type: "text", placeholder: "Type a message...", cls: "message-input" });
    const sendButton = inputArea.createEl("button", { text: "Send", cls: "send-button" });
    sendButton.addEventListener("click", () => {
      const message = input.value.trim();
      if (message) {
        this.plugin.sendMessage(message);
        input.value = "";
      }
    });
    input.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        sendButton.click();
      }
    });
  }
  async onClose() {
  }
  focus() {
    const input = this.containerEl.querySelector(".message-input");
    if (input) {
      input.focus();
    }
  }
  onNewSession() {
    const messagesArea = this.containerEl.querySelector(".chat-messages");
    if (messagesArea) {
      messagesArea.empty();
      messagesArea.createEl("p", { text: "New chat session started", cls: "session-notice" });
    }
  }
  appendStreamingContent(content) {
    const messagesArea = this.containerEl.querySelector(".chat-messages");
    if (messagesArea) {
      const lastMessage = messagesArea.querySelector(".message.assistant:last-child .content");
      if (lastMessage) {
        lastMessage.textContent += content;
      } else {
        const messageDiv = messagesArea.createEl("div", { cls: "message assistant" });
        messageDiv.createEl("span", { cls: "role", text: "\u{1F916} Claude: " });
        messageDiv.createEl("span", { cls: "content", text: content });
      }
    }
  }
  onStreamingComplete() {
    const messagesArea = this.containerEl.querySelector(".chat-messages");
    if (messagesArea) {
      messagesArea.scrollTop = messagesArea.scrollHeight;
    }
  }
  updateHistory(history) {
    const messagesArea = this.containerEl.querySelector(".chat-messages");
    if (messagesArea) {
      messagesArea.empty();
      history.forEach((message) => {
        const messageDiv = messagesArea.createEl("div", { cls: `message ${message.type}` });
        const roleIcon = message.type === "user" ? "\u{1F464}" : "\u{1F916}";
        messageDiv.createEl("span", { cls: "role", text: `${roleIcon} ${message.type === "user" ? "You" : "Claude"}: ` });
        messageDiv.createEl("span", { cls: "content", text: message.content });
        messageDiv.createEl("span", { cls: "timestamp", text: message.timestamp.toLocaleTimeString() });
      });
      messagesArea.scrollTop = messagesArea.scrollHeight;
    }
  }
};
var ClaudeChatSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Claude Chat Settings" });
    containerEl.createEl("h3", { text: "Claude CLI Configuration" });
    new import_obsidian.Setting(containerEl).setName("Auto-detect Claude CLI").setDesc("Automatically check if Claude CLI is available on startup").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoDetectCLI).onChange(async (value) => {
      this.plugin.settings.autoDetectCLI = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Session timeout").setDesc("Maximum time to wait for Claude CLI response (milliseconds)").addText((text) => text.setPlaceholder("30000").setValue(this.plugin.settings.sessionTimeout.toString()).onChange(async (value) => {
      const timeout = parseInt(value);
      if (!isNaN(timeout) && timeout > 0) {
        this.plugin.settings.sessionTimeout = timeout;
        await this.plugin.saveSettings();
      }
    }));
    containerEl.createEl("h3", { text: "Vault Integration" });
    new import_obsidian.Setting(containerEl).setName("Enable vault integration").setDesc("Allow Claude to access and analyze your vault content").addToggle((toggle) => toggle.setValue(this.plugin.settings.vaultIntegration).onChange(async (value) => {
      this.plugin.settings.vaultIntegration = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Allowed tools").setDesc("Comma-separated list of tools Claude can use (e.g., read,search,write)").addText((text) => text.setPlaceholder("read,search").setValue(this.plugin.settings.allowedTools.join(",")).onChange(async (value) => {
      this.plugin.settings.allowedTools = value.split(",").map((tool) => tool.trim());
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Chat Configuration" });
    new import_obsidian.Setting(containerEl).setName("Max history size").setDesc("Maximum number of messages to keep in chat history").addText((text) => text.setPlaceholder("100").setValue(this.plugin.settings.maxHistorySize.toString()).onChange(async (value) => {
      const size = parseInt(value);
      if (!isNaN(size) && size > 0) {
        this.plugin.settings.maxHistorySize = size;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Show performance metrics").setDesc("Display response times and performance information in console").addToggle((toggle) => toggle.setValue(this.plugin.settings.showPerformanceMetrics).onChange(async (value) => {
      this.plugin.settings.showPerformanceMetrics = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Status" });
    const statusEl = containerEl.createEl("div", { cls: "claude-chat-status" });
    const cliStatus = this.plugin.cliAvailable ? "\u2705 Available" : "\u274C Not Found";
    statusEl.createEl("p", { text: `Claude CLI: ${cliStatus}` });
    if (this.plugin.settings.showPerformanceMetrics && this.plugin.cliAvailable) {
      const metrics = this.plugin.getPerformanceMetrics();
      statusEl.createEl("p", { text: `Last Response Time: ${metrics.lastResponseTime}ms` });
      statusEl.createEl("p", { text: `Success Rate: ${metrics.successCount}/${metrics.successCount + metrics.errorCount}` });
    }
  }
};
var main_default = ClaudeChatPlugin;
